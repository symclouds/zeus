

************** Stand-Alone esbuild of the Zeus Lambda Functions *****************

1. Add all the Lambda functions for the project to the ./src folder

2. If dependencies are missing they will be found during packaging and can be added manually

	$> npm i <package name> --save-dev  e.g: npm i @aws-sdk/client-s3s

3. Build the esbuild package from the top level (node_module level)
   This will compress the function code as well as all its dependencies into a single file (index.js)
   In addition it will build a .map file but I'm uncertain how that will be used (inded.js.map)
   The resulting files will be written to: ./dist/<functionName> 

	$> npm run build

4. Finally we need to build ZIP archives of the packages so we can run them in Lambda
   The resulting zip files will be written to: ./dist/<functionName.zip>

	$> npm run package

**************  Full Build and deployment/destruction of Zeus to/from the Cloud ***************

The deployment/destructions process of Zeus to/from the Cloud has been simplified by including 
deployemnt/destruction scripts. The scripts will perform everything necessary including building
the code modules via esbuild.

Deployment Script:

Synopsis:
   ./deployZeus.sh -e <email address> -a <account number> -r <region> -p <profile>
   $> ./deployZeus.sh -e iljazi@gmail.com -a 474668411930 -r ca-central-1 -p deploy

Required Options:
   -e <email address> 
   The email address Zeus will use to send out user email verification requests to on registration

   -a <account number>
   The account number that Zeus will be deployed in

   -r <region>
   The region that Zeus will be deployed in

   -p <profile>
   The profile that contains the security credentials necessary for deployment

   ./deployZeus.sh -e iljazi@gmail.com -a 474668411930 -r ca-central-1 -p deploy

Description:
The deployment script perfroms the following steps after it is cloned by the user:
   0. Installs all the necessary packages from NPM:
   {npm i}

   1. Builds, packages and minifis all the Zeus functions using esbuild
   (I dont think this step should be done becaues it will expose the js code to potential customers)
   (neither should we package the .map files because they can be used to reveal the js code)
   (by having access to the code customers dont need to purchase, besides 100 users free is a)
   (decent size pool for non production workloads)

   2. Bootstraps the Cloud Environment CFToolKit (deploy), sets email env variable CFToolKit 

   3. Synthesizes the CF Templates for the project (creates all the artifacts)

   4. Deploys Zeus to the Cloud

   ./deployZeus.sh -e iljazi@gmail.com -a 474668411930 -r ca-central-1 -p deploy

